#:kivy 1.4.1

ParticleBuilder: 

<ParticleBuilder>:
    params_layout: params_layout
    variation_layout: variation_layout
    particle_window: particle_window
    load_save: load_save
    FloatLayout: 
        canvas:
            Color:
                rgb: (.5, .5, .5)
            Rectangle:
                pos: root.pos
                size: root.size
        size_hint: (1., 1.)
        ParticleVariationLayout:
            id: variation_layout
            pos: root.pos[0] + root.width*.02, root.pos[1] + root.height*.032
            size: (root.size[0]/3 - root.size[0]*.04, root.size[1]/2 - root.size[1]*.064)
        ParticleLoadSaveLayout:
            id: load_save
            pos: root.pos[0] + root.width*.355, root.pos[1] + root.height*.08
            size: (root.size[0]/8, root.size[1]/3)
        ParticleParamsLayout:
            id: params_layout
            pos: root.pos[0] + root.width*.02 + root.width/2, root.pos[1] + root.height*.032
            size: (root.size[0]/2. - root.size[0]*.04, root.size[1] - root.size[1]*.064)
        FloatLayout:
            id: particle_window
            pos: root.pos[0] + root.width*.02, root.pos[1] + root.height*.5 + root.height*.032
            size: (root.size[0]/2 - root.size[0]*.04, root.size[1]/2 - root.size[1]*.064)
            on_size: 
                root.demo_particle.emitter_x = self.pos[0] + self.width *.5
                root.demo_particle.emitter_y = self.pos[1] + self.height *.5
            canvas:
                Color:
                    rgb: (0., 0., 0.)
                Rectangle:
                    pos: self.pos
                    size: self.size

<ParticleVariationLayout>:
    canvas:
        Color:
            rgb:(0, 1, 1)
        Rectangle:
            pos: self.pos
            size: self.size
    variation_layout: variationlayout
    on_size:
        print self.size
    BoxLayout:
        size_hint: (1., 1.)
        pos: root.pos
        size: root.size
        orientation: 'vertical'
        StackLayout:
            id: variationlayout
            size_hint: (1., .9)
            spacing: 2
        Button:
            size_hint: (1., .1)
            text: 'Add Variant'
            font_size: root.size[0]*.06
            halign: 'center'
            valign: 'middle'
            background_color: (1,0,0,1)
            on_state: root.add_variant() if (self.state == 'down') else None   

<ParticleLoadSaveLayout>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: 'vertical'
        spacing: 20
        DebugPanel:
            size_hint: (1.,.3)
        Button:
            size_hint: (1.,.3)
            text: 'Save'
            font_size: root.size[0]*.125
            on_state: root.show_save_popup() if (self.state == 'down') else None
        Button:
            size_hint: (1.,.3)
            text: 'Load'
            font_size: root.size[0]*.125
            halign: 'center'
            valign: 'middle'
            on_state: root.show_load_popup() if (self.state == 'down') else None

<DebugPanel>:
    fps: root.fps
    Label:
        pos: root.pos
        size: root.size
        halign: 'center'
        valign: 'middle'
        text: 'FPS: ' + root.fps if root.fps != None else 'Click to\nStart FPS'
        on_touch_down: root.update_fps(None)

<GetNewFileNameLayout>:
    fname_input: fname_input

    BoxLayout:
        size_hint: (1., 1.)
        margin: 10
        spacing: 10
        orientation: 'vertical'
        pos: root.pos
        size: root.size

        TextInput:
            id: fname_input
            multiline: False
            text: 'effect.pex'
            size_hint_y: None
            height: 40
        BoxLayout:
            orientation: 'horizontal'
            margin: 10
            spacing: 10
            size_hint_y: None
            height: 40
            Widget:
                size_hint_x: .25
            Button:
                size_hint_x: .25
                text: 'Cancel'
                on_release: root.cancel()
            Button:
                size_hint_x: .25
                text: 'OK'
                on_release: root.ok()
            Widget:
                size_hint_x: .25

[LoadFilenameButton@Label]
    size_hint_x: 1.
    size_hint_y: None
    height: ctx.height
    text: ctx.text
    text_size: self.size
    on_touch_down: self.collide_point(*args[1].pos) and ctx.parent.open_filename(self.text)

[SaveFilenameButton@Label]
    size_hint_x: 1.
    size_hint_y: None
    height: ctx.height
    text: ctx.text
    text_size: self.size
    on_touch_down: self.collide_point(*args[1].pos) and ctx.parent.save_filename(self.text)

[VariantButton@ToggleButton]
    size_hint: (1., .1)
    text: ctx.text
    font_size: root.size[0]*.06
    group: ctx.group
    num_tab: ctx.num_tab
    pbuilder: ctx.pbuilder
    pos: self.pos
    on_state: self.pbuilder.params_layout.add_tab_to_layout(ctx.num_tab) if root.state == 'down' else self.pbuilder.params_layout.remove_tab_from_layout(ctx.num_tab)
    canvas: 
        Color:
            rgba: (0, .5, 0, .5)
        Rectangle:
            pos: self.pos
            size: self.size

<ParticleParamsLayout>:
    particle_tabs: particle_tabs
    BoxLayout:
        pos: root.pos
        size: root.size
        TabbedPanel:
            id: particle_tabs
            pos: root.pos
            size: root.size
            default_tab_content: root.get_default_tab()
            default_tab_text: 'Hello'

<Default_Particle_Panel>:
    Label:
        center: root.center
        text: 'Add or Choose a Particle\n       to Begin Editing'
        font_size: root.size[0]*.04

<Particle_Color_Sliders>:
    color_r_slider: color_r_slider
    color_g_slider: color_g_slider
    color_b_slider: color_b_slider
    color_a_slider: color_a_slider
    slider_text: root.slider_text
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: 'vertical'
        padding: 5
        Label:
            size_hint: (1., .08)
            text: '[b]'+root.slider_text+'[/b]' if root.slider_text is not None else 'No Label'
            font_size: root.size[0]*.07
            markup: True
            text_size: self.size
            halign: 'center'
            valign: 'middle'
            color: (root.color_r_slider.value, root.color_g_slider.value, root.color_b_slider.value, root.color_a_slider.value)
        Slider:
            id: color_r_slider
            size_hint: (1., .23)
            min: 0.0
            max: 1.0
            value: 1.
            orientation: 'horizontal'
            on_value: root.color_r = root.clip(self.value, self.min, self.max)
            canvas:
                Color:
                    rgba: (self.value, 0, 0, 1.)
                Rectangle:
                    pos: self.pos[0] + self.width*.3, self.pos[1]
                    size: self.size[0]*.4, self.size[1]*.2
        Slider:
            id: color_g_slider
            size_hint: (1., 0.23)
            min: 0.0
            max: 1.0
            value: 1.
            orientation: 'horizontal'
            on_value: root.color_g = root.clip(self.value, self.min, self.max)
            canvas:
                Color:
                    rgba: (0, self.value, 0, 1.)
                Rectangle:
                    pos: self.pos[0] + self.width*.3, self.pos[1]
                    size: self.size[0]*.4, self.size[1]*.2
        Slider:
            id: color_b_slider
            size_hint: (1., 0.23)
            min: 0.0
            max: 1.0
            value: 1.
            orientation: 'horizontal'
            on_value: root.color_b = root.clip(self.value, self.min, self.max)
            canvas:
                Color:
                    rgba: (0, 0, self.value, 1.)
                Rectangle:
                    pos: self.pos[0] + self.width*.3, self.pos[1]
                    size: self.size[0]*.4, self.size[1]*.2
        Slider:
            id: color_a_slider
            size_hint: (1., 0.23)
            min: 0.0
            max: 1.0
            value: 1.0
            orientation: 'horizontal'
            on_value: root.color_a = root.clip(self.value, self.min, self.max)
            canvas:
                Color:
                    rgba: (0, 0, 0, self.value)
                Rectangle:
                    pos: self.pos[0] + self.width*.3, self.pos[1]
                    size: self.size[0]*.4, self.size[1]*.2

<Particle_Property_Slider>:
    prop_slider: prop_slider
    slider_text: root.slider_text
    value: 0
    BoxLayout:
        pos: root.pos
        size: root.size
        orientation: 'horizontal'
        Label:
            size_hint: (.3, 1.)
            text: root.slider_text if root.slider_text is not None else 'No Label'
            font_size: root.size[0]*.02
            halign: 'center'
            valign: 'middle'
        Slider:
            id: prop_slider
            size_hint: (.5, 1.)
            orientation: 'horizontal'
            min: root.slider_bounds_min
            max: root.slider_bounds_max
            value: root.slider_bounds_init_value
            on_value: root.value = self.value
            step: root.slider_step
        Label:
            size_hint: (.2, 1.)
            text: str(round(root.prop_slider.value,1))
            font_size: root.size[0]*.04
            halign: 'center'
            valign: 'middle'

<ImageChooser>:
    BoxLayout:
        pos: root.pos
        size:root.size
        orientation: 'horizontal'
        Button:
            id: choose_image_button
            size_hint: (.7, 1.)
            text: root.button_text
            on_release: root.button_callback()
        Image:
            size_hint: (.3, 1.)
            source: root.image_location

<ImageChooserCell>:
    Image:
        pos: root.pos
        size: root.size
        source: root.image_location if root.image_location is not None else None
        on_touch_down: self.collide_point(*args[1].pos) and root.cell_press()

<LoadParticlePopupContents>:
    blayout: blayout

    ScrollView:
        pos: root.pos
        size: root.size
        BoxLayout:
            id: blayout
            size_hint_x: 1.
            size_hint_y: None
            height: root.blayout_height
            orientation: 'vertical'
            padding: 10
            spacing: 5
            BoxLayout:
                orientation: 'horizontal'
                size_hint_x: 1.
                size_hint_y: None
                height: root.menu_height
                ToggleButton:
                    text: 'templates'
                    group: 'importmode'
                    state: 'down'
                    on_state: root.button_callback('load templates') if self.state == 'down' else None
                    size_hint: (.5, 1)
                ToggleButton:
                    text: 'user files'
                    group: 'importmode'
                    on_state: root.button_callback('load user files') if self.state == 'down' else None
                    size_hint: (.5, 1)

<SaveParticlePopupContents>:
    blayout: blayout

    ScrollView:
        pos: root.pos
        size: root.size
        BoxLayout:
            id: blayout
            size_hint_x: 1.
            size_hint_y: None
            height: root.blayout_height
            orientation: 'vertical'
            padding: 10
            spacing: 5

<ParticlePanel>:
    max_particles_slider: max_particles_slider
    life_span_slider: life_span_slider
    life_span_variance_slider: life_span_variance_slider
    start_size_slider: start_size_slider
    start_size_variance_slider: start_size_variance_slider
    end_size_slider: end_size_slider
    end_size_variance_slider: end_size_variance_slider
    emit_angle_slider: emit_angle_slider
    emit_angle_variance_slider: emit_angle_variance_slider
    start_rotation_slider: start_rotation_slider
    start_rotation_variance_slider: start_rotation_variance_slider
    end_rotation_slider: end_rotation_slider
    end_rotation_variance_slider: end_rotation_variance_slider
    BoxLayout:
        pos: root.pos
        size: root.size
        orientation: 'vertical'
        padding: 8
        ImageChooser:
            id: image_chooser_button
            size_hint: (1., .2)
            on_image_location: root.texture_location = self.image_location
        Particle_Property_Slider:
            id: max_particles_slider
            size_hint: (1., .2)
            slider_text: 'Max Particles'
            slider_bounds_min: root.property('max_num_particles').get_min(root)
            slider_bounds_max: root.property('max_num_particles').get_max(root)
            slider_bounds_init_value: root.max_num_particles
            on_value: root.max_num_particles = self.value
        Particle_Property_Slider:
            id: life_span_slider
            size_hint: (1., .2)
            slider_text: 'Life Span'
            slider_bounds_min: root.property('life_span').get_min(root)
            slider_bounds_max: root.property('life_span').get_max(root)
            slider_bounds_init_value: root.life_span
            slider_step: .025
            on_value: root.life_span = self.value
        Particle_Property_Slider:
            id: life_span_variance_slider
            size_hint: (1., .2)
            slider_text: 'Life Span Variance'
            slider_bounds_min: root.property('life_span_variance').get_min(root)
            slider_bounds_max: root.property('life_span_variance').get_max(root)
            slider_bounds_init_value: root.life_span_variance
            slider_step: .025
            on_value: root.life_span_variance = self.value
        Particle_Property_Slider:
            id: start_size_slider
            size_hint: (1., .2)
            slider_text: 'Start Size'
            slider_bounds_min: root.property('start_size').get_min(root)
            slider_bounds_max: root.property('start_size').get_max(root)
            slider_bounds_init_value: root.start_size
            on_value: root.start_size = self.value
        Particle_Property_Slider:
            id: start_size_variance_slider
            size_hint: (1., .2)
            slider_text: 'Start Size Variance'
            slider_bounds_min: root.property('start_size_variance').get_min(root)
            slider_bounds_max: root.property('start_size_variance').get_max(root)
            slider_bounds_init_value: root.start_size_variance
            on_value: root.start_size_variance = self.value
        Particle_Property_Slider:
            id: end_size_slider
            size_hint: (1., .2)
            slider_text: 'End Size'
            slider_bounds_min: root.property('end_size').get_min(root)
            slider_bounds_max: root.property('end_size').get_max(root)
            slider_bounds_init_value: root.end_size
            on_value: root.end_size = self.value
        Particle_Property_Slider:
            id: end_size_variance_slider
            size_hint: (1., .2)
            slider_text: 'End Size Variance'
            slider_bounds_min: root.property('end_size_variance').get_min(root)
            slider_bounds_max: root.property('end_size_variance').get_max(root)
            slider_bounds_init_value: root.end_size_variance
            on_value: root.end_size_variance = self.value
        Particle_Property_Slider:
            id: emit_angle_slider
            size_hint: (1., .2)
            slider_text: 'Emit Angle'
            slider_bounds_min: root.property('emit_angle').get_min(root)
            slider_bounds_max: root.property('emit_angle').get_max(root)
            slider_bounds_init_value: root.emit_angle
            on_value: root.emit_angle = self.value
        Particle_Property_Slider:
            id: emit_angle_variance_slider
            size_hint: (1., .2)
            slider_text: 'Emit Angle Variance'
            slider_bounds_min: root.property('emit_angle_variance').get_min(root)
            slider_bounds_max: root.property('emit_angle_variance').get_max(root)
            slider_bounds_init_value: root.emit_angle_variance
            on_value: root.emit_angle_variance = self.value
        Particle_Property_Slider:
            id: start_rotation_slider
            size_hint: (1., .2)
            slider_text: 'Start Rotation'
            slider_bounds_min: root.property('start_rotation').get_min(root)
            slider_bounds_max: root.property('start_rotation').get_max(root)
            slider_bounds_init_value: root.start_rotation
            on_value: root.start_rotation = self.value
        Particle_Property_Slider:
            id: start_rotation_variance_slider
            size_hint: (1., .2)
            slider_text: 'Start Rotation Variance'
            slider_bounds_min: root.property('start_rotation_variance').get_min(root)
            slider_bounds_max: root.property('start_rotation_variance').get_max(root)
            slider_bounds_init_value: root.start_rotation_variance
            on_value: root.start_rotation_variance = self.value
        Particle_Property_Slider:
            id: end_rotation_slider
            size_hint: (1., .2)
            slider_text: 'End Rotation'
            slider_bounds_min: root.property('end_rotation').get_min(root)
            slider_bounds_max: root.property('end_rotation').get_max(root)
            slider_bounds_init_value: root.end_rotation
            on_value: root.end_rotation = self.value
        Particle_Property_Slider:
            id: end_rotation_variance_slider
            size_hint: (1., .2)
            slider_text: 'End Rotation Variance'
            slider_bounds_min: root.property('end_rotation_variance').get_min(root)
            slider_bounds_max: root.property('end_rotation_variance').get_max(root)
            slider_bounds_init_value: root.end_rotation_variance
            on_value: root.end_rotation_variance = self.value
                  
<BehaviorPanel>:
    emitter_x_variance_slider: emitter_x_variance_slider
    emitter_y_variance_slider: emitter_y_variance_slider
    gravity_x_slider: gravity_x_slider
    gravity_y_slider: gravity_y_slider
    speed_slider: speed_slider
    speed_variance_slider: speed_variance_slider
    radial_acceleration_slider: radial_acceleration_slider
    radial_acceleration_variance_slider: radial_acceleration_variance_slider
    tangential_acceleration_slider: tangential_acceleration_slider
    tangential_acceleration_variance_slider: tangential_acceleration_variance_slider
    max_radius_slider: max_radius_slider
    max_radius_variance_slider: max_radius_variance_slider
    min_radius_slider: min_radius_slider
    rotate_per_second_slider: rotate_per_second_slider
    rotate_per_second_variance_slider: rotate_per_second_variance_slider
    BoxLayout:
        pos: root.pos[0], root.pos[1] + root.height*.9
        size: root.width, root.height*.1 
        orientation: 'horizontal'
        size_hint: (1., .1)
        padding: 8
        ToggleButton:
            text: 'Gravity Emitter'
            font_size: root.size[0]*.03
            group: 'emitter_type'
            background_color: (0,0,1,.5)
            on_state: root.set_emitter_type(0) if self.state == 'down' else None
        ToggleButton:
            text: 'Radial Emitter'
            font_size: root.size[0]*.03
            group: 'emitter_type'
            background_color: (0,0,1,.5)
            on_state: root.set_emitter_type(1) if self.state == 'down' else None
    BoxLayout:
        pos: root.pos if root.emitter_type == 0 else (-100, -100)
        size: root.size[0], root.size[1]*.9 if root.emitter_type == 0 else (1, 1)
        orientation: 'vertical'
        Particle_Property_Slider:
            id: emitter_x_variance_slider
            size_hint: (1., .1)
            slider_text: 'Emitter X Variance'
            slider_bounds_min: root.property('emitter_x_variance').get_min(root)
            slider_bounds_max: root.property('emitter_x_variance').get_max(root)
            slider_bounds_init_value: root.emitter_x_variance
            on_value: root.emitter_x_variance = self.value
        Particle_Property_Slider:
            id: emitter_y_variance_slider
            size_hint: (1., .1)
            slider_text: 'Emitter Y Variance'
            slider_bounds_min: root.property('emitter_y_variance').get_min(root)
            slider_bounds_max: root.property('emitter_y_variance').get_max(root)
            slider_bounds_init_value: root.emitter_y_variance
            on_value: root.emitter_y_variance = self.value
        Particle_Property_Slider:
            id: gravity_x_slider
            size_hint: (1., .1)
            slider_text: 'Gravity X'
            slider_bounds_min: root.property('gravity_x').get_min(root)
            slider_bounds_max: root.property('gravity_x').get_max(root)
            slider_bounds_init_value: root.gravity_x
            on_value: root.gravity_x = self.value
        Particle_Property_Slider:
            id: gravity_y_slider
            size_hint: (1., .1)
            slider_text: 'Gravity Y'
            slider_bounds_min: root.property('gravity_y').get_min(root)
            slider_bounds_max: root.property('gravity_y').get_max(root)
            slider_bounds_init_value: root.gravity_y
            on_value: root.gravity_y = self.value
        Particle_Property_Slider:
            id: speed_slider
            size_hint: (1., .1)
            slider_text: 'Speed'
            slider_bounds_min: root.property('speed').get_min(root)
            slider_bounds_max: root.property('speed').get_max(root)
            slider_bounds_init_value: root.speed
            on_value: root.speed = self.value
        Particle_Property_Slider:
            id: speed_variance_slider
            size_hint: (1., .1)
            slider_text: 'Speed Variance'
            slider_bounds_min: root.property('speed_variance').get_min(root)
            slider_bounds_max: root.property('speed_variance').get_max(root)
            slider_bounds_init_value: root.speed_variance
            on_value: root.speed_Variance = self.value
        Particle_Property_Slider:
            id: radial_acceleration_slider
            size_hint: (1., .1)
            slider_text: 'Radial Acceleration'
            slider_bounds_min: root.property('radial_acceleration').get_min(root)
            slider_bounds_max: root.property('radial_acceleration').get_max(root)
            slider_bounds_init_value: root.radial_acceleration
            on_value: root.radial_acceleration = self.value
        Particle_Property_Slider:
            id: radial_acceleration_variance_slider
            size_hint: (1., .1)
            slider_text: 'Radial Acceleration\n Variance'
            slider_bounds_min: root.property('radial_acceleration_variance').get_min(root)
            slider_bounds_max: root.property('radial_acceleration_variance').get_max(root)
            slider_bounds_init_value: root.radial_acceleration_variance
            on_value: root.radial_acceleration_variance = self.value
        Particle_Property_Slider:
            id: tangential_acceleration_slider
            size_hint: (1., .1)
            slider_text: 'Tangential Acceleration'
            slider_bounds_min: root.property('tangential_acceleration').get_min(root)
            slider_bounds_max: root.property('tangential_acceleration').get_max(root)
            slider_bounds_init_value: root.tangential_acceleration
            on_value: root.tangential_acceleration = self.value
        Particle_Property_Slider:
            id: tangential_acceleration_variance_slider
            size_hint: (1., .1)
            slider_text: 'Tangential Acceleration\n Variance'
            slider_bounds_min: root.property('tangential_acceleration_variance').get_min(root)
            slider_bounds_max: root.property('tangential_acceleration_variance').get_max(root)
            slider_bounds_init_value: root.tangential_acceleration_variance
            on_value: root.tangential_acceleration_variance = self.value
    
    BoxLayout:
        pos: root.pos if root.emitter_type == 1 else (-100, -100)
        size: root.size[0], root.size[1]*.9 if root.emitter_type == 1 else (1, 1)
        orientation: 'vertical'
        Particle_Property_Slider:
            id: max_radius_slider
            size_hint: (1., .1)
            slider_text: 'Max Radius'
            slider_bounds_min: root.property('max_radius').get_min(root)
            slider_bounds_max: root.property('max_radius').get_max(root)
            slider_bounds_init_value: root.max_radius
            on_value: root.max_radius = self.value
        Particle_Property_Slider:
            id: max_radius_variance_slider
            size_hint: (1., .1)
            slider_text: 'Max Radius Variance'
            slider_bounds_min: root.property('max_radius_variance').get_min(root)
            slider_bounds_max: root.property('max_radius_variance').get_max(root)
            slider_bounds_init_value: root.max_radius_variance
            on_value: root.max_radius_variance = self.value
        Particle_Property_Slider:
            id: min_radius_slider
            size_hint: (1., .1)
            slider_text: 'Min Radius'
            slider_bounds_min: root.property('min_radius').get_min(root)
            slider_bounds_max: root.property('min_radius').get_max(root)
            slider_bounds_init_value: root.min_radius
            on_value: root.min_radius = self.value
        Particle_Property_Slider:
            id: rotate_per_second_slider
            size_hint: (1., .1)
            slider_text: 'Rotate Per Second'
            slider_bounds_min: root.property('rotate_per_second').get_min(root)
            slider_bounds_max: root.property('rotate_per_second').get_max(root)
            slider_bounds_init_value: root.rotate_per_second
            step: .025
            on_value: root.rotate_per_second = self.value
        Particle_Property_Slider:
            id: rotate_per_second_variance_slider
            size_hint: (1., .1)
            slider_text: 'Rotate Per Second\n Variance'
            slider_bounds_min: root.property('rotate_per_second_variance').get_min(root)
            slider_bounds_max: root.property('rotate_per_second_variance').get_max(root)
            slider_bounds_init_value: root.rotate_per_second_variance
            step: .025
            on_value: root.rotate_per_second_variance = self.value

<ColorPanel>:
    start_color_picker: start_color_picker
    end_color_picker: end_color_picker
    start_color_variation_sliders: start_color_variation_sliders
    end_color_variation_sliders: end_color_variation_sliders

    BoxLayout:
        pos: root.pos
        size: root.size
        orientation: 'vertical'
        padding: 5
        Label:
            text: "[b]Start Color[/b]"
            size_hint_y: None
            height: 30
            markup: True
        BoxLayout:
            orientation: 'horizontal'
            size_hint: (1., 0.5)
            ColorPicker:
                id: start_color_picker
                size_hint: (0.6, 1.)
                bg_color: (1, 1, 1, 0)
                on_selected_color: root.start_color = self.selected_color
            Particle_Color_Sliders:
                size_hint: (0.4,1.)
                id: start_color_variation_sliders
                slider_text: 'Variation RGBA'
                on_color_r: root.start_color_r_variance = self.color_r
                on_color_g: root.start_color_g_variance = self.color_g
                on_color_b: root.start_color_b_variance = self.color_b
                on_color_a: root.start_color_a_variance = self.color_a
        Label:
            text: "[b]End Color[/b]"
            size_hint_y: None
            height: 30
            markup: True
        BoxLayout:
            orientation: 'horizontal'
            size_hint: (1., 0.5)
            ColorPicker:
                id: end_color_picker
                size_hint: (0.6, 1.)
                bg_color: (1, 1, 1, 0)
                on_selected_color: root.end_color = self.selected_color
            Particle_Color_Sliders:
                id: end_color_variation_sliders
                size_hint: (0.4, 1.)
                slider_text: 'Variation RGBA'
                on_color_r: root.end_color_r_variance = self.color_r
                on_color_g: root.end_color_g_variance = self.color_g
                on_color_b: root.end_color_b_variance = self.color_b
                on_color_a: root.end_color_a_Variance = self.color_a


#            id: start_color_sliders
#            slider_text: 'Start Color RGBA'
#            on_color_r: root.start_color_r = self.color_r
#            on_color_g: root.start_color_g = self.color_g
#            on_color_b: root.start_color_b = self.color_b
#            on_color_a: root.start_color_a = self.color_a
#        Particle_Color_Sliders:
#            id: start_color_variation_sliders
#            slider_text: 'Start Color\n Variation RGBA'
#            on_color_r: root.start_color_r_variance = self.color_r
#            on_color_g: root.start_color_g_variance = self.color_g
#            on_color_b: root.start_color_b_variance = self.color_b
#            on_color_a: root.start_color_a_variance = self.color_a
#        Particle_Color_Sliders:
#            id: end_color_sliders
#            slider_text: 'End Color RGBA'
#            on_color_r: root.end_color_r = self.color_r
#            on_color_g: root.end_color_g = self.color_g
#            on_color_b: root.end_color_b = self.color_b
#            on_color_a: root.end_color_a = self.color_a
#        Particle_Color_Sliders:
#            id: end_color_variation_sliders
#            slider_text: 'End Color\n Variation RGBA'
#            on_color_r: root.end_color_r_variance = self.color_r
#            on_color_g: root.end_color_g_variance = self.color_g
#            on_color_b: root.end_color_b_variance = self.color_b
#            on_color_a: root.end_color_a_Variance = self.color_a

    